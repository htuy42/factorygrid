# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from protos import factori_pb2 as protos_dot_factori__pb2


class FactoryServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Interact = channel.unary_unary(
                '/tutorial.FactoryService/Interact',
                request_serializer=protos_dot_factori__pb2.Interaction.SerializeToString,
                response_deserializer=protos_dot_factori__pb2.Empty.FromString,
                )
        self.RequestView = channel.unary_unary(
                '/tutorial.FactoryService/RequestView',
                request_serializer=protos_dot_factori__pb2.Rectangle.SerializeToString,
                response_deserializer=protos_dot_factori__pb2.ScreenResponse.FromString,
                )
        self.RequestViewStream = channel.stream_stream(
                '/tutorial.FactoryService/RequestViewStream',
                request_serializer=protos_dot_factori__pb2.ViewRequest.SerializeToString,
                response_deserializer=protos_dot_factori__pb2.ScreenResponse.FromString,
                )


class FactoryServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Interact(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestView(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestViewStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FactoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Interact': grpc.unary_unary_rpc_method_handler(
                    servicer.Interact,
                    request_deserializer=protos_dot_factori__pb2.Interaction.FromString,
                    response_serializer=protos_dot_factori__pb2.Empty.SerializeToString,
            ),
            'RequestView': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestView,
                    request_deserializer=protos_dot_factori__pb2.Rectangle.FromString,
                    response_serializer=protos_dot_factori__pb2.ScreenResponse.SerializeToString,
            ),
            'RequestViewStream': grpc.stream_stream_rpc_method_handler(
                    servicer.RequestViewStream,
                    request_deserializer=protos_dot_factori__pb2.ViewRequest.FromString,
                    response_serializer=protos_dot_factori__pb2.ScreenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tutorial.FactoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FactoryService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Interact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tutorial.FactoryService/Interact',
            protos_dot_factori__pb2.Interaction.SerializeToString,
            protos_dot_factori__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tutorial.FactoryService/RequestView',
            protos_dot_factori__pb2.Rectangle.SerializeToString,
            protos_dot_factori__pb2.ScreenResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestViewStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/tutorial.FactoryService/RequestViewStream',
            protos_dot_factori__pb2.ViewRequest.SerializeToString,
            protos_dot_factori__pb2.ScreenResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
